from copper.ga import *
from copper.units import *
from copper.curves import *


class chiller:
    def __init__(
        self,
        ref_cap,
        ref_cap_unit,
        full_eff,
        full_eff_unit,
        part_eff,
        part_eff_unit,
        compressor_type,
        condenser_type,
        compressor_speed,
        set_of_curves="",
        model="ect_lwt",
        sim_engine="energyplus",
    ):
        self.type = "chiller"
        self.compressor_type = compressor_type
        self.condenser_type = condenser_type
        self.compressor_speed = compressor_speed
        self.ref_cap = ref_cap
        self.ref_cap_unit = ref_cap_unit
        self.full_eff = full_eff
        self.full_eff_unit = full_eff_unit
        self.part_eff = part_eff
        self.part_eff_unit = part_eff_unit
        self.model = model
        self.sim_engine = sim_engine
        self.set_of_curves = set_of_curves

    def generate_set_of_curves(
        self,
        method="typical",
        pop_size=100,
        tol=0.002,
        max_gen=2000,
        vars="",
        sFac=0.5,
        retain=0.2,
        random_select=0.1,
        mutate=0.95,
        bounds=(6, 10),
        base_curves=[],
    ):
        """Generate a set of curves for a particular chiller() object.

        :param str method: Method used to generate the set of curves, either `typical` or `best_match`

                           - `typical` uses typical curves and modify them to reach a particular IPLV
                           - `best_match` uses curves that best match the chiller object description
        :param int pop_size: Population size used by the genetic algorithm
        :param float tol: Tolerance used by the genetic algorithm to determine if the proposed solution is acceptable
                          The lower, the more stringent
        :param int max_gen: Maximum number of generation
        :param list() vars: List of variable to run the alorithm on
        :param float sFac: Linear fitness normalization factor, the higher the more aggressive the normalization will be
        :param float retain: Probability of retaining an individual in the next generation
        :param float random_select: Probability of randomly selecting an individual to be part of the next generation
        :param float mutate: Probability of an individual to be mutated in the next generation
        :param tuple() bounds: Random modification bounds (TODO: add more details)
        :return: Set of curves object generated by the genetic algorithm that matches the chiller() definition
        :rtype: SetofCurves()

        """
        ga = GA(
            self,
            method,
            pop_size,
            tol,
            max_gen,
            vars,
            sFac,
            retain,
            random_select,
            mutate,
            bounds,
            base_curves,
        )
        return ga.generate_set_of_curves()

    def calc_eff(self, eff_type, unit="kw/ton"):
        """Calculate chiller efficiency.

        :param str eff_type: chiller performance indicator, currently supported `full` (full load rating)
                             and `part` (part load rating)
        :param str unit: Unit of the efficiency indicator
        :return: chiller performance indicator
        :rtype: float

        """
        # Retrieve equipment efficiency and unit
        kwpton_ref = self.full_eff
        kwpton_ref_unit = self.full_eff_unit

        # Convert to kWpton if necessary
        if self.full_eff_unit != "kw/ton":
            kwpton_ref_unit = Units(kwpton_ref, kwpton_ref_unit)
            kwpton_ref = kwpton_ref_unit.conversion("kw/ton")

        # Conversion factors
        ton_to_kbtu = 12
        kbtu_to_kw = 3.412141633

        # Full load conditions
        load_ref = 1
        eir_ref = 1 / (ton_to_kbtu / kwpton_ref / kbtu_to_kw)

        # Test conditions
        # Same approach as EnergyPlus
        # Same as AHRI Std 550/590
        loads = [1, 0.75, 0.5, 0.25]

        # List of equipment efficiency for each load
        kwpton_lst = []

        # DOE-2 chiller model
        if self.model == "ect_lwt":
            if self.condenser_type == "air":
                # Temperatures from AHRI Std 550/590
                chw = 6.67
                ect = [3 + 32 * loads[0], 3 + 32 * loads[1], 3 + 32 * loads[2], 13]
            elif self.condenser_type == "water":
                # Temperatures from AHRI Std 550/590
                chw = 6.67
                ect = [8 + 22 * loads[0], 8 + 22 * loads[1], 19, 19]

            # Retrieve curves
            for curve in self.set_of_curves:
                if curve.out_var == "cap-f-t":
                    cap_f_t = curve
                elif curve.out_var == "eir-f-t":
                    eir_f_t = curve
                else:
                    eir_f_plr = curve

            # Calculate EIR for each testing conditions
            try:
                for idx, load in enumerate(loads):
                    dt = ect[idx] - chw
                    cap_f_chw_ect = cap_f_t.evaluate(chw, ect[idx])
                    eir_f_chw_ect = eir_f_t.evaluate(chw, ect[idx])
                    cap_op = load_ref * cap_f_chw_ect
                    plr = (
                        load * cap_f_t.evaluate(chw, ect[0]) / cap_op
                    )  # Pending EnergyPlus development team review otherwise load / cap_op
                    eir_plr = eir_f_plr.evaluate(plr, dt)
                    # eir = power / load so eir * plr = (power / load) * (load / cap_op)
                    eir = eir_ref * eir_f_chw_ect * eir_plr / plr
                    kwpton = eir / kbtu_to_kw * ton_to_kbtu
                    if eff_type == "full" and idx == 0:
                        return kwpton
                    kwpton_lst.append(eir / kbtu_to_kw * ton_to_kbtu)

                # Coefficients from AHRI Std 550/590
                iplv = 1 / (
                    (0.01 / kwpton_lst[0])
                    + (0.42 / kwpton_lst[1])
                    + (0.45 / kwpton_lst[2])
                    + (0.12 / kwpton_lst[3])
                )
            except:
                return -999
        else:
            # TODO: implement IPLV calcs for other chiller algorithm
            return -999

        # Convert IPLV to desired unit
        if unit != "kw/ton":
            iplv_org = Units(iplv, "kw/ton")
            iplv = iplv_org.conversion(unit)

        return iplv
